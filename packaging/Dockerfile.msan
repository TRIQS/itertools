FROM ubuntu:22.04
ARG APPNAME=itertools
ARG LLVM=15
ARG NTHREAD=10

RUN apt-get update && apt-get install -y lsb-release wget software-properties-common && \
      wget -O /tmp/llvm.sh https://apt.llvm.org/llvm.sh && chmod +x /tmp/llvm.sh && /tmp/llvm.sh ${LLVM} && \
      DEBIAN_FRONTEND=noninteractive apt-get install -y \
      clang-${LLVM} \
      cmake \
      g++-12 \
      gfortran \
      git \
      vim \
      lldb-${LLVM} \
      hdf5-tools \
      libblas-dev \
      libboost-dev \
      libclang-${LLVM}-dev \
      libomp-${LLVM}-dev \
      libfftw3-dev \
      libgfortran5 \
      libgmp-dev \
      libssl-dev \
      pkg-config \
      python3-clang-${LLVM} \
      python3-dev \
      python3-mako \
      python3-matplotlib \
      python3-numpy \
      python3-pip \
      python3-scipy

ENV PYTHON_VERSION=3.10 \
    CC=clang-${LLVM} CXX=clang++-${LLVM} LLVM_VERSION=${LLVM}.0.7
RUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${LLVM} 60 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-${LLVM} --slave /usr/bin/clang-cpp clang-cpp /usr/bin/clang-cpp-${LLVM}

# Build libcxx and libcxxabi with MSAN
# c.f. https://github.com/google/sanitizers/wiki/MemorySanitizerLibcxxHowTo
RUN git clone https://github.com/llvm/llvm-project --branch llvmorg-${LLVM_VERSION} --depth 1 -c advice.detachedHead=false /tmp/llvm_src && \
      mkdir /tmp/llvm_build && cd /tmp/llvm_build && \
      cmake /tmp/llvm_src/llvm \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=/usr/lib/llvm-${LLVM} \
      -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi" \
      -DLLVM_USE_SANITIZER=MemoryWithOrigins && \
      make -j${NTHREAD} cxx cxxabi llvm-config

# Build Environment using MSAN
# c.f. https://libcxx.llvm.org/UsingLibcxx.html#using-a-custom-built-libc
ENV MSAN_FLAGS="-fsanitize=memory -fno-omit-frame-pointer -fsanitize-recover=all -fsanitize-memory-track-origins -ggdb3" \
    CUSTOM_LIBCXX_FLAGS="-nostdinc++ -nostdlib++ -isystem/tmp/llvm_build/include/c++/v1 -isystem/tmp/llvm_build/include/aarch64-unknown-linux-gnu/c++/v1 -L/tmp/llvm_build/lib/aarch64-unknown-linux-gnu -Wl,-rpath,/tmp/llvm_build/lib/aarch64-unknown-linux-gnu -lc++ -lc++abi"
ENV CXXFLAGS="$MSAN_FLAGS -Wno-unused-command-line-argument $CUSTOM_LIBCXX_FLAGS" \
    CFLAGS="$MSAN_FLAGS" \
    LDFLAGS="$MSAN_FLAGS" \
    MSAN_OPTIONS=symbolize=1:halt_on_error=1 \
    MSAN_SYMBOLIZER_PATH=/usr/lib/llvm-${LLVM}/bin/llvm-symbolizer

# Static zlib using fPIC to be linked into hdf5
ADD https://www.zlib.net/zlib-1.2.13.tar.gz /tmp/
RUN cd /tmp && tar xf /tmp/zlib-1.2.13.tar.gz && cd zlib-1.2.13 && \
      CFLAGS="-fPIC $CFLAGS" ./configure --prefix=/opt/zlib && make -j${NTHREAD} && make install && \
      cd /tmp && rm -rf /tmp/zlib*

# HDF5
ADD https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-1_14_1-2.tar.gz /tmp/
RUN cd /tmp && tar xf /tmp/hdf5-1_14_1-2.tar.gz && chmod 1777 . && \
      mkdir build && cd build && \
      cmake /tmp/hdf5-hdf5-1_14_1-2 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/hdf5 \
                                               -DHDF5_ENABLE_Z_LIB_SUPPORT=ON -DZLIB_LIBRARY=/opt/zlib/lib/libz.a -DZLIB_INCLUDE_DIR:PATH=/opt/zlib/include && \
      make -j${NTHREAD} && make install && \
      cd /tmp && rm -rf /tmp/hdf5-* /tmp/build
ENV HDF5_ROOT=/opt/hdf5

# libevent
ADD https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz /tmp/
RUN cd /tmp && tar xf /tmp/libevent-2.1.12-stable.tar.gz && cd libevent-2.1.12-stable && \
      ./configure --prefix=/opt/openmpi --enable-shared && make -j${NTHREAD} && make install && \
      cd /tmp && rm -rf /tmp/libevent*

# hwloc
ADD https://download.open-mpi.org/release/hwloc/v2.9/hwloc-2.9.2.tar.bz2 /tmp/
RUN cd /tmp && tar xf /tmp/hwloc-2.9.2.tar.bz2 && cd hwloc-2.9.2 && \
      ./configure --prefix=/opt/openmpi --enable-shared && make -j${NTHREAD} && make install && \
      cd /tmp && rm -rf /tmp/hwloc*

# OpenMPI
ADD https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.5.tar.bz2 /tmp/
RUN cd /tmp && tar xf /tmp/openmpi-4.1.5.tar.bz2 && cd openmpi-4.1.5 && \
      ./configure --prefix=/opt/openmpi --enable-shared --disable-mpi-fortran --disable-pty-support --with-hwloc=/opt/openmpi --with-libevent=/opt/openmpi && make -j${NTHREAD} && make install && \
      cd /tmp && rm -rf /tmp/openmpi-4.1.5*
ENV MPI_HOME=/opt/openmpi \
    MPICC=/opt/openmpi/bin/mpicc

# Use libflame to provide blas / lapack
RUN git clone https://github.com/Wentzell/libflame /tmp/libflame && cd /tmp/libflame && \
      ./configure --prefix=/opt/libflame --enable-lapack2flame --enable-builtin-blas --build=aarch64-unknown-linux-gnu && make -j${NTHREAD} && make install && \
      cd /tmp && rm -rf /tmp/libflame

# Dockerfile.build with sanitization enabled
COPY requirements.txt /src/$APPNAME/requirements.txt
# Install numpy first to prevent h5py from pulling in a newer version first
RUN pip3 install `grep numpy /src/$APPNAME/requirements.txt` && \
    pip3 install -r /src/$APPNAME/requirements.txt

RUN useradd -m build

ENV SRC=/src \
    BUILD=/home/build \
    INSTALL=/usr/local \
    PYTHONPATH=/usr/local/lib/python${PYTHON_VERSION}/site-packages \
    CMAKE_PREFIX_PATH=/usr/lib/cmake/$APPNAME

COPY . ${SRC}/$APPNAME
WORKDIR ${BUILD}/$APPNAME
RUN chown -R build . ${SRC}/$APPNAME
USER build
RUN cmake $SRC/$APPNAME -DCMAKE_INSTALL_PREFIX=$INSTALL -DBuild_Deps=Always -DCLANG_OPT="$CXXFLAGS" -DMSAN=ON \
    -DLAPACK_LIBRARIES=/opt/libflame/lib/libflame.a -DBLAS_LIBRARIES=/opt/libflame/lib/libflame.a && \
    make -j${NTHREAD}
RUN cd test/c++ && make test CTEST_OUTPUT_ON_FAILURE=1 || true
